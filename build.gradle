/**
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

buildscript {
    repositories {
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'org.grails.plugins:hibernate5:7.0.4'
        classpath 'org.grails.plugins:views-gradle:2.0.2'
        classpath 'com.bmuschko:gradle-docker-plugin:6.0.0'
        classpath('com.epages:restdocs-api-spec-gradle-plugin:0.10.0') {
            exclude group: 'com.google.guava', module: 'guava'
        }
    }
}


plugins {
    id 'com.gorylenko.gradle-git-properties' version '2.0.0'
    id 'org.asciidoctor.convert' version '1.5.3'
}


version '0.1'
group 'rest.docs'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'com.epages.restdocs-api-spec'
apply plugin: 'com.bmuschko.docker-remote-api'

repositories {
    maven { url 'https://repo.grails.org/grails/core' }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'log4j') {
            details.useTarget "org.slf4j:log4j-over-slf4j:1.7.5"
        }
        if (details.requested.name == 'commons-logging') {
            details.useTarget "org.slf4j:jcl-over-slf4j:1.7.5"
        }
    }
}

springBoot {
    mainClassName = 'rest.docs.Application'
}

dependencies {
    developmentOnly('org.springframework.boot:spring-boot-devtools')
    developmentOnly 'io.methvin:directory-watcher:0.4.0'
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-autoconfigure'
    compile 'org.grails:grails-core'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.grails:grails-plugin-url-mappings'
    compile 'org.grails:grails-plugin-rest'
    compile 'org.grails:grails-plugin-codecs'
    compile 'org.grails:grails-plugin-interceptors'
    compile 'org.grails:grails-plugin-services'
    compile 'org.grails:grails-plugin-datasource'
    compile 'org.grails:grails-plugin-databinding'
    compile 'org.grails:grails-web-boot'
    compile 'org.grails:grails-logging'
    compile 'org.grails:grails-plugin-i18n'
    compile 'org.grails.plugins:cache'
    compile 'org.grails.plugins:async'

    compile 'org.grails.plugins:spring-security-rest:3.0.1'
    compile 'org.grails.plugins:events'
    compile 'org.grails.plugins:hibernate5'
    compile 'org.hibernate:hibernate-core:5.4.18.Final'
    compile 'org.grails.plugins:views-json'
    compile 'org.grails.plugins:views-json-templates'

    compileOnly 'io.micronaut:micronaut-inject-groovy'

    console 'org.grails:grails-console'
    profile 'org.grails.profiles:rest-api'

    runtime 'org.glassfish.web:el-impl:2.1.2-b03'
    runtime 'com.h2database:h2'
    runtime 'org.apache.tomcat:tomcat-jdbc'
    runtime 'javax.xml.bind:jaxb-api:2.3.1'

    testCompile 'org.grails.plugins:geb:2.0.0.RC1'
    testCompile 'io.micronaut:micronaut-inject-groovy'
    testCompile 'org.grails:grails-gorm-testing-support'
    testCompile 'org.mockito:mockito-core'
    testCompile 'org.grails:grails-web-testing-support'
    testCompile 'org.grails:views-json-testing-support'
    testCompile 'org.hibernate.validator:hibernate-validator:6.0.20.Final'
    testCompile('com.epages:restdocs-api-spec-mockmvc:0.9.7')
    testCompile('com.epages:restdocs-api-spec-restassured:0.9.7')

    runtime "org.postgresql:postgresql:42.2.0"
    testCompile "org.testcontainers:postgresql:1.15.1"
    testCompile "org.testcontainers:spock:1.15.1"

    // for dev mode:
    developmentOnly "org.testcontainers:postgresql:1.15.1"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

// Customize Git properties plugin.
gitProperties {
    // Change date format in git.properties file.
    dateFormat = "yyyy-MM-dd HH:mm:ssZ"
    dateFormatTimeZone = 'EST'
}

openapi {
    host = 'localhost:8080'
    basePath = '/api'
    title = 'Rest Docs Open API'
    snippetsDirectory = 'build/docs/generated-snippets'
    description = 'Rest Docs Open API'
    version = '1.0.0'
    format = 'json'
}

openapi3 {
    server = 'http://localhost:8080'
    title = 'Rest Docs Open API'
    snippetsDirectory = 'build/docs/generated-snippets'
    description = 'Rest Docs Open API'
    version = '1.0.0'
    format = 'yaml'
}

postman {
    title = 'Rest Docs Open API'
    version = '1.0.0'
    baseUrl = 'http://localhost:8080'
    snippetsDirectory = 'build/docs/generated-snippets'
}

integrationTest {
    testLogging {
        events "passed", "skipped", "failed"
        showStackTraces = true
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

test {
    if (project.hasProperty('maxParallelForks')) {
        maxParallelForks = project.maxParallelForks as int
    }
    if (project.hasProperty('forkEvery')) {
        forkEvery = project.forkEvery as int
    }

}


import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

ext {
    dockerTag = "${project.name}:${project.version}".toLowerCase()
    dockerBuildDir = mkdir("${buildDir}/docker")
}
task prepareDocker(type: Copy, dependsOn: assemble) {
    description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
    group = 'Docker'

    from 'src/main/docker'
    from project.jar

    into dockerBuildDir
}
task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
    description = 'Create a Dockerfile file'
    group = 'Docker'

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from 'openjdk:8u151-jdk-alpine'

    exposePort 8080

    workingDir '/app'

    copyFile jar.archiveName, 'rest-docs.jar'
    copyFile 'app-entrypoint.sh', 'app-entrypoint.sh'
    runCommand 'chmod +x app-entrypoint.sh'

    entryPoint '/app/app-entrypoint.sh'
}
task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    description = 'Create Docker image to run the Grails application'
    group = 'Docker'

    inputDir = file(dockerBuildDir)
    images.add(dockerTag)
}


apply from: 'gradle/restdocs.gradle'